generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           Int                @id @default(autoincrement())
  name                         String?
  email                        String             @unique
  passwordHash                 String
  role                         UserRole
  isVerified                   Boolean            @default(false)
  emailVerificationToken       String?
  emailVerificationTokenExpiry DateTime?
  createdAt                    DateTime           @default(now())
  updatedAt                    DateTime           @updatedAt
  passwordResetToken           String?
  passwordResetTokenExpiry     DateTime?
  student                      Student?
  admin                        Admin?
  tokens                       Token[]
  adminApplications            AdminApplication[]
  reviewedApplications         AdminApplication[] @relation("ApplicationReviewer")

  @@map("users")
}

model College {
  id                 Int                @id @default(autoincrement())
  name               String
  location           String
  website            String?
  status             CollegeStatus      @default(PENDING)
  allowedEmailDomain String?
  address            String?
  isSystemCollege    Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  jobs               Job[]
  students           Student[]
  admins             Admin[]
  adminApplications  AdminApplication[]

  @@map("colleges")
}

model Admin {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  collegeId   Int
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  college     College  @relation(fields: [collegeId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@map("admins")
}

model Student {
  id           Int           @id @default(autoincrement())
  userId       Int           @unique
  collegeId    Int
  profile      Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]
  college      College       @relation(fields: [collegeId], references: [id])
  user         User          @relation(fields: [userId], references: [id])

  @@map("students")
}

model Job {
  id           Int           @id @default(autoincrement())
  collegeId    Int
  title        String
  description  String
  requirements String?
  location     String?
  status       JobStatus     @default(ACTIVE)
  postedAt     DateTime      @default(now())
  expiresAt    DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]
  college      College       @relation(fields: [collegeId], references: [id])

  @@index([collegeId])
  @@map("jobs")
}

model Application {
  id        Int               @id @default(autoincrement())
  jobId     Int
  studentId Int
  resumeUrl String?
  status    ApplicationStatus @default(APPLIED)
  appliedAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  job       Job               @relation(fields: [jobId], references: [id])
  student   Student           @relation(fields: [studentId], references: [id])

  @@unique([jobId, studentId])
  @@index([studentId])
  @@map("applications")
}

model Token {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("tokens")
}

model AdminApplication {
  id                     Int                  @id @default(autoincrement())
  userId                 Int
  collegeId              Int
  position               String?
  verificationDocumentUrl String?
  status                 AdminApplicationStatus @default(PENDING)
  reviewedBy             Int?
  reviewedAt             DateTime?
  reviewComments         String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  user                   User                 @relation(fields: [userId], references: [id])
  college                College              @relation(fields: [collegeId], references: [id])
  reviewer               User?                @relation("ApplicationReviewer", fields: [reviewedBy], references: [id])

  @@map("admin_applications")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  PENDING_ADMIN
  STUDENT
}

enum ApplicationStatus {
  APPLIED
  UNDER_REVIEW
  ACCEPTED
  REJECTED
}

enum JobStatus {
  ACTIVE
  CLOSED
}

enum CollegeStatus {
  ACTIVE
  PENDING
  REJECTED
}

enum AdminApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}
